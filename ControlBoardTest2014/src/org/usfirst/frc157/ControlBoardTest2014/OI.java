// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc157.ControlBoardTest2014;

import org.usfirst.frc157.ControlBoardTest2014.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //***
    //Defualt Joystick code we should use
    public Joystick driverLeft;
    public JoystickButton driverLeftButtonTrigger;  // Button 1 -  Trigger
    public JoystickButton driverLeftButton2;        // Button 2 -  Stick down
    public JoystickButton driverLeftButton3;        // Button 3 -  Stick center
    public JoystickButton driverLeftButton4;        // Button 4 -  Stick left
    public JoystickButton driverLeftButton5;        // Button 5 -  Stick right
    public JoystickButton driverLeftButton6;        // Button 6 -  Base Left Away 
    public JoystickButton driverLeftButton7;        // Button 7 -  Base Left Close
    public JoystickButton driverLeftButton8;        // Button 8 -  Base Near Left
    public JoystickButton driverLeftButton9;        // Button 9 -  Base Near Right
    public JoystickButton driverLeftButton10;       // Button 10 - Base Right Close
    public JoystickButton driverLeftButton11;       // Button 11 - Base RIght Away

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
           driverLeft = new Joystick(2);

        driverLeftButtonTrigger = new JoystickButton(driverLeft, 1);  // Button 1 -  Trigger
        driverLeftButton2 = new JoystickButton(driverLeft, 2);        // Button 2 -  Stick down
        driverLeftButton3 = new JoystickButton(driverLeft, 3);        // Button 3 -  Stick center
        driverLeftButton4 = new JoystickButton(driverLeft, 4);        // Button 4 -  Stick left
        driverLeftButton5 = new JoystickButton(driverLeft, 5);        // Button 5 -  Stick right
        driverLeftButton6 = new JoystickButton(driverLeft, 6);        // Button 6 -  Base Left Away 
        driverLeftButton7 = new JoystickButton(driverLeft, 7);        // Button 7 -  Base Left Close
        driverLeftButton8 = new JoystickButton(driverLeft, 8);        // Button 8 -  Base Near Left
        driverLeftButton9 = new JoystickButton(driverLeft, 9);        // Button 9 -  Base Near Right
        driverLeftButton10 = new JoystickButton(driverLeft, 10);      // Button 10 - Base Right Close
        driverLeftButton11 = new JoystickButton(driverLeft, 11);      // Button 11 - Base RIght Away
        
        driverLeftButtonTrigger.whenPressed(new MoveMotorTime());
        //driverLeftButtonTrigger.whenPressed(new DebugPrint("driverLeftButtonTrigger Pressed"));
        driverLeftButton2.whenPressed(new DebugPrint("driverLeftButton2 Pressed"));
        driverLeftButton3.whenPressed(new DebugPrint("driverLeftButton3 Pressed"));
        driverLeftButton4.whenPressed(new DebugPrint("driverLeftButton4 Pressed"));
        driverLeftButton5.whenPressed(new DebugPrint("driverLeftButton5 Pressed"));
        driverLeftButton6.whenPressed(new DebugPrint("driverLeftButton6 Pressed"));
        driverLeftButton7.whenPressed(new DebugPrint("driverLeftButton7 Pressed"));
        driverLeftButton8.whenPressed(new ChangeMotorControl());
        driverLeftButton9.whenPressed(new DebugPrint("driverLeftButton9 Pressed"));
        driverLeftButton10.whenPressed(new DebugPrint("driverLeftButton10 Pressed"));
        driverLeftButton11.whenPressed(new DebugPrint("driverLeftButton11 Pressed"));


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("MoveMotor", new MoveMotorTime());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystickLeft() {
        return driverLeft;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
