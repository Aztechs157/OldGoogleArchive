// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc157.qEncoder;
    
import edu.wpi.first.wpilibj.CANJaguar;
import edu.wpi.first.wpilibj.can.*;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    public static boolean SPEED_CONTROL = false;
    public static int TEST_JAG_CAN_ID_RR = 5;
    public static int TEST_JAG_CAN_ID_RF = 6;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANJaguar encJagRRMotorDrive;    
    public static CANJaguar encJagRFMotorDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        try {
            encJagRRMotorDrive = new CANJaguar(TEST_JAG_CAN_ID_RR);
            encJagRFMotorDrive = new CANJaguar(TEST_JAG_CAN_ID_RF);
        } catch (CANTimeoutException ex) {
            System.out.println("Exception while configuring speed");
        }
   
        if (SPEED_CONTROL) {
            System.out.println("---------------- SPEED Setup --------------------------");
            setupJagForSpeedControl(encJagRRMotorDrive);
            setupJagForSpeedControl(encJagRFMotorDrive);            
         } else {
            System.out.println("---------------- POSITION Setup --------------------------");
            setupJagForPositionControl(encJagRRMotorDrive);
            setupJagForPositionControl(encJagRFMotorDrive);            
         }

        if(encJagRRMotorDrive == null)
        {
            System.out.println("Why is encJagRRMotorDrive NULL?");
        }
        if(encJagRFMotorDrive == null)
        {
            System.out.println("Why is encJagRFMotorDrive NULL?");
        }
    }
    
    private static void setupJagForSpeedControl(CANJaguar jag) {
        try {
            jag.changeControlMode(CANJaguar.ControlMode.kSpeed);
            jag.setSpeedReference(CANJaguar.SpeedReference.kQuadEncoder);
            jag.configEncoderCodesPerRev(360 * 3);
            jag.setPID(.75, 0.05, 0);
            jag.enableControl();
        } catch (CANTimeoutException ex) {
            System.out.println("Exception while configuring speed");
        }

    }

    private static void setupJagForPositionControl(CANJaguar jag) {
        try {
            jag.changeControlMode(CANJaguar.ControlMode.kPosition);
            jag.setPositionReference(CANJaguar.PositionReference.kQuadEncoder);
            jag.configEncoderCodesPerRev(360);
//                encJagRRMotorDrive.setPID(25, 0.04, 5);
            jag.setPID(15, 0.08, 25);
//                encJagRRMotorDrive.configNeutralMode(CANJaguar.NeutralMode.kBrake);
            jag.enableControl();
        } catch (CANTimeoutException ex) {
            System.out.println("Exception while configuring position");
        }

    }
}
