// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team157.robot;

import org.usfirst.frc.team157.robot.commands.AutonomousCommand;
import org.usfirst.frc.team157.robot.subsystems.Drive;
import org.usfirst.frc.team157.robot.subsystems.Forklift;
import edu.wpi.first.wpilibj.CANJaguar;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 *
 * @author Teju Nareddy
 */
public class Robot extends IterativeRobot
{
	// Create variables
	public static Command autonomousCommand;
	public static OI oi;
	public static Drive drive;
	public static Forklift forklift;

	@Override
	public void autonomousInit()
	{
		// schedule the autonomous command (example)
		if (autonomousCommand != null)
		{
			autonomousCommand.start();
		}
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic()
	{
		Scheduler.getInstance().run();
	}

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit()
	{
		// Instantiate all hardware components
		RobotMap.init();

		// Instantiate subsystems
		drive = new Drive();
		forklift = new Forklift();
		// OI must be at the end of the list!!!
		oi = new OI();

		// Instantiate the command used for the autonomous period
		autonomousCommand = new AutonomousCommand();
	}

	@Override
	public void teleopInit()
	{
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
		{
			autonomousCommand.cancel();
		}
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic()
	{
		Scheduler.getInstance().run();
	}

	/**
	 * This function called periodically during test mode
	 */
	@Override
	public void testPeriodic()
	{
		LiveWindow.run();
	}

	public static void setupJagForPercentControl(CANJaguar jag)
	{
		if (jag != null)
		{
			jag.setPercentMode();
			jag.configNeutralMode(CANJaguar.NeutralMode.Coast);
			jag.enableControl();
			jag.setVoltageRampRate(0.02);
		}
	}

	public static void setupJagForVoltageControl(CANJaguar jag)
	{
		if (jag != null)
		{
			jag.setVoltageMode();
			jag.configNeutralMode(CANJaguar.NeutralMode.Coast);
			jag.enableControl();
			jag.setVoltageRampRate(0.02);
			// jag.setVoltageMode(CANJaguar.kQuadEncoder, 360 * 3);
			// jag.setPID(2, 0, 0);
			// jag.setScalingFactor(100);
		}
	}
}
