// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc157.ControlBoardTest2014.subsystems;

import edu.wpi.first.wpilibj.AnalogChannel;
import edu.wpi.first.wpilibj.CANJaguar;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Jaguar;
import org.usfirst.frc157.ControlBoardTest2014.RobotMap;
import org.usfirst.frc157.ControlBoardTest2014.commands.*;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.interfaces.Potentiometer;
import org.usfirst.frc157.ControlBoardTest2014.Robot;

/**
 *
 */
public class MotorSubsystem extends Subsystem
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	public CANJaguar jag1;
	public Jaguar jag2;
	public DigitalInput limSwitch;
	public AnalogChannel pot;
	
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	// Put methods for controlling this subsystem
	// here. Call these from Commands.
	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		
		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());\
		
		for (int i = 0; i < 3; i++)
		{
			try
			{
				jag1 = new CANJaguar(RobotMap.motorSubsystemCANJaguar1ID); // To find the ID of the jag... would normally be a
																			// static var
			}
			catch (CANTimeoutException ex)
			{
				System.out.println("Jag not initialized");
			}
		}
		Robot.setupJagForVoltageControl(jag1);
		
		jag2 = new Jaguar(RobotMap.motorSubsystemPWMJaguar1ID);
		limSwitch = new DigitalInput(RobotMap.DIGITAL_PORT_LimSwitch);
		pot = new AnalogChannel(RobotMap.ANALOG_PORT_Pot);
	}
	
	public void setCANJagVoltage(double voltage)
	{
		// System.out.println(left + " - " + right);
		try
		{
			if (null != jag1)
			{
				jag1.setX(voltage);
			}
		}
		catch (CANTimeoutException ex)
		{
			// System.out.println("tank Drive Timeout");
			// ex.printStackTrace();
		}
	}
	
	public void setPWMJagSpeed(double speed)
	{
		jag2.set(speed);
		System.out.println("Speed set to: " + speed);
	}
	
	public String getLimSwitchPos()
	{
		if (limSwitch == null)
			return "Not Initialized Yet!";
		else if (!limSwitch.get())
			return "Limit Switch is Closed";
		else
			return "Limit Switch is Open";
	}
	
	public double getPotVoltage()
	{
		return pot.getAverageVoltage();
	}
}
