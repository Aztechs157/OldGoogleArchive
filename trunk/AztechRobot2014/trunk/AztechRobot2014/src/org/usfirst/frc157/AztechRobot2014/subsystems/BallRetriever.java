// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc157.AztechRobot2014.subsystems;

import edu.wpi.first.wpilibj.CANJaguar;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import org.usfirst.frc157.AztechRobot2014.RobotMap;
import org.usfirst.frc157.AztechRobot2014.commands.*;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc157.AztechRobot2014.Potentiometer;
import org.usfirst.frc157.AztechRobot2014.Robot;


/**
 *
 */
public class BallRetriever extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    //private Potentiometer pot;
    private CANJaguar jag;
    private Talon talon;
    
    private static double X1 = 45;
    private static double X2 = 135;
    private static double Y1 = -.2;
    private static double Y2 = .6;
    private static double slope;
    
    public static double PID_P = 1;
    public static double PID_I = 0;
    public static double PID_D = 0;
    
    public BallRetriever()
    {
        slope = (Y2 - Y1)/(X2 - X1);
        //pot = new Potentiometer(RobotMap.ANALOG_PORT_BallRetrieverPot, -1, 1, 45, 135);
        try {
            jag = new CANJaguar(RobotMap.JAGID_Retriever);
            jag.setVoltageRampRate(0.1);
            jag.configNeutralMode(CANJaguar.NeutralMode.kBrake);
            jag.changeControlMode(CANJaguar.ControlMode.kPosition);
            jag.setPositionReference(CANJaguar.PositionReference.kPotentiometer);
            jag.configPotentiometerTurns(1);    //TODO
            jag.setPID(PID_P, PID_I, PID_D);    //TODO
            jag.enableControl();
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
       talon = new Talon(RobotMap.PWM_RetrieverTalon);
    }
    
    public void updatePID()
    {
       PID_P = SmartDashboard.getNumber("Ball Retriever Arm PID P", PID_P);
       PID_I = SmartDashboard.getNumber("Ball Retriever Arm PID I", PID_I);
       PID_D = SmartDashboard.getNumber("Ball Retriever Arm PID D", PID_D);
        try {
            jag.setPID(PID_P, PID_I, PID_D);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void setAngle(double angle)
    {
        try {
            double voltageToSet = convertAngleToVoltage(angle);
            jag.setX(voltageToSet);
            SmartDashboard.putNumber("Desired Angle", convertVoltageToAngle(jag.getPosition()));
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
    }
    
    public double getAngle()
    {
        try {
            SmartDashboard.putNumber("Current Angle", convertVoltageToAngle(jag.getPosition()));
            return convertVoltageToAngle(jag.getPosition());
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        return 0;
    }
    
    public void spinRoller(double speed)
    {
        talon.set(speed);
        SmartDashboard.putNumber("Set Roller Speed", speed);
    }
    
    public static double convertAngleToVoltage(double angle)
    {
        return slope * (angle - X1) + Y1;
    }
    
    public static double convertVoltageToAngle(double voltage)
    {
        return (voltage - Y1 + slope*X1) / slope;
    }
}

