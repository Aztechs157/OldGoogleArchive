// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc157.AztechRobot2014.subsystems;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc157.AztechRobot2014.RobotMap;
import org.usfirst.frc157.AztechRobot2014.ScaledCANJaguar;
import org.usfirst.frc157.AztechRobot2014.commands.OperatorDrive;

/**
 *
 */
public class Drive extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static ScaledCANJaguar driveFL;
    public static ScaledCANJaguar driveFR;
    public static ScaledCANJaguar driveRL;
    public static ScaledCANJaguar driveRR;
    public static RobotDrive mechanumDrive;
    public static Gyro gyro;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new OperatorDrive());

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    public Drive() {
        init();
    }

    public final void init() {

        int tries = 0;
        boolean failed = false;
        do {
            try {
                driveFL = new ScaledCANJaguar(RobotMap.JAGID_FrontLeft);
                driveFL.setScalingFactor(-1 * RobotMap.SpeedScale);
                failed = false;
            } catch (CANTimeoutException ex) {
                failed = true;
                System.out.println("FAIL " + tries + " - Instantiating FL JAG " + RobotMap.JAGID_FrontLeft);
//                ex.printStackTrace();
            }
        } while (failed && (tries++ < RobotMap.m_kMaxCANRetries));

        tries = 0;
        failed = false;
        do {
            try {
                driveFR = new ScaledCANJaguar(RobotMap.JAGID_FrontRight);
                driveFR.setScalingFactor(RobotMap.SpeedScale);
            } catch (CANTimeoutException ex) {
                failed = true;
                System.out.println("FAIL " + tries + " - Instantiating FR JAG " + RobotMap.JAGID_FrontRight);
//                ex.printStackTrace();
            }
        } while (failed && (tries++ < RobotMap.m_kMaxCANRetries));

        tries = 0;
        failed = false;
        do {
            try {
                driveRL = new ScaledCANJaguar(RobotMap.JAGID_RearLeft);
                driveRL.setScalingFactor(-1 * RobotMap.SpeedScale);
            } catch (CANTimeoutException ex) {
                failed = true;
                System.out.println("FAIL " + tries + " - Instantiating RL JAG " + RobotMap.JAGID_RearLeft);
//                ex.printStackTrace();
            }
        } while (failed && (tries++ < RobotMap.m_kMaxCANRetries));

        tries = 0;
        failed = false;
        do {
            try {
                driveRR = new ScaledCANJaguar(RobotMap.JAGID_RearRight);
                driveRR.setScalingFactor(RobotMap.SpeedScale);
            } catch (CANTimeoutException ex) {
                failed = true;
                System.out.println("FAIL " + tries + " - Instantiating RR JAG " + RobotMap.JAGID_RearRight);
//                ex.printStackTrace();
            }
        } while (failed && (tries++ < RobotMap.m_kMaxCANRetries));

//        setupJagForSpeedControl(driveFL);
//        setupJagForSpeedControl(driveRL);
//        setupJagForSpeedControl(driveFR);
//        setupJagForSpeedControl(driveRR);
        setupJagForVoltageControl(driveFL);
        setupJagForVoltageControl(driveRL);
        setupJagForVoltageControl(driveFR);
        setupJagForVoltageControl(driveRR);
                
        tries = 0;
        failed = false;
        do {
            try {
                if (null != driveFL) {
                    driveFL.setX(0);
                }
                if (null != driveRL) {
                    driveRL.setX(0);
                }
                if (null != driveFR) {
                    driveFR.setX(0);
                }
                if (null != driveRR) {
                    driveRR.setX(0);
                }
            } catch (CANTimeoutException ex) {
                failed = true;
                System.out.println("FAIL " + tries + " - Setting Jags to stop ");
//                ex.printStackTrace();
            }
        } while (failed && (tries++ < RobotMap.m_kMaxCANRetries));

//        try {
//            mechanumDrive = new RobotDrive(driveFL, driveRL, driveFR, driveRR);
//        } catch (Exception ex) {
//            failed = true;
//            System.out.println("Can't get mech drive going...  FAIL");
////            ex.printStackTrace();
//        }
//        if (mechanumDrive == null) {
//            System.out.println("MD = NULL");
//        } else {
//            try {
//                mechanumDrive.setSafetyEnabled(false);
//                mechanumDrive.setExpiration(4.0);
//                mechanumDrive.setSensitivity(0.5);
//                mechanumDrive.setMaxOutput(1.0);
//                mechanumDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, RobotMap.FrontLeftMotorInverted);
//                mechanumDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, RobotMap.RearLeftMotorInverted);
//                mechanumDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, RobotMap.FrontRightMotorInverted);
//                mechanumDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, RobotMap.FrontRightMotorInverted);
//            } catch (Exception ex) {
//                System.out.println("Can't configure mech drive ...  FAIL");
////                ex.printStackTrace();
//            }
//        }
    }

    private static void setupJagForSpeedControl(ScaledCANJaguar jag) {
        if (jag != null) {
            int tries = 0;
            boolean failed = false;
            do {
                try {
                    jag.setVoltageRampRate(0.1);
                    jag.configNeutralMode(CANJaguar.NeutralMode.kCoast);
                    jag.changeControlMode(CANJaguar.ControlMode.kSpeed);
                    jag.setSpeedReference(CANJaguar.SpeedReference.kQuadEncoder);
                    jag.configEncoderCodesPerRev(360 * 3);
                    jag.setPID(.6, .2, 0);
                    jag.enableControl();
                } catch (CANTimeoutException ex) {
                    failed = true;
                    System.out.println("Exception " + tries + " while configuring speed");
                }
            } while (failed && (tries++ < RobotMap.m_kMaxCANRetries));

        }
    }

    private static void setupJagForVoltageControl(ScaledCANJaguar jag) {
        if (jag != null) {
            int tries = 0;
            boolean failed = false;
            do {
                try {
                    jag.setVoltageRampRate(0.02);
                    jag.configNeutralMode(CANJaguar.NeutralMode.kCoast);
                    jag.changeControlMode(CANJaguar.ControlMode.kPercentVbus);
                    jag.setSpeedReference(CANJaguar.SpeedReference.kQuadEncoder);
                    jag.configEncoderCodesPerRev(360 * 3);
                    jag.setPID(2, 0, 0);
                    jag.enableControl();
                } catch (CANTimeoutException ex) {
                    failed = true;
                    System.out.println("Exception " + tries + " while configuring speed");
                }
            } while (failed && (tries++ < RobotMap.m_kMaxCANRetries));
//            jag.setScalingFactor(100);
        }
    }

    private static void setupJagForPositionControl(ScaledCANJaguar jag) {
        if (jag != null) {
            int tries = 0;
            boolean failed = false;
            do {
                try {
                    jag.setVoltageRampRate(0.02);
                    jag.configNeutralMode(CANJaguar.NeutralMode.kCoast);
                    jag.changeControlMode(CANJaguar.ControlMode.kPosition);
                    jag.setPositionReference(CANJaguar.PositionReference.kQuadEncoder);
                    jag.configEncoderCodesPerRev(360);
                    jag.setPID(15, 0.08, 25);
//                encJagRRMotorDrive.configNeutralMode(CANJaguar.NeutralMode.kBrake);
                    jag.enableControl();
                } catch (CANTimeoutException ex) {
                    failed = true;
                    System.out.println("Exception " + tries + " while configuring position");
                }
            } while (failed && (tries++ < RobotMap.m_kMaxCANRetries));

        }
    }
//    public void checkControl(CANJaguar theJag) {
//        try {
//            CANJaguar.ControlMode ctlMode = theJag.getControlMode();
//
//        } catch (CANTimeoutException ex) {
//            System.out.println("Timeout checking control states");
//        }
//    }
//
    int iterationCount = 0;

    private void checkAndFixMotors() {
        iterationCount++;
        if (iterationCount % 1 == 0) {
            checkAndFixMotor(driveFL);
            checkAndFixMotor(driveRL);
            checkAndFixMotor(driveFR);
            checkAndFixMotor(driveRR);
        }
    }

    private void checkAndFixMotor(ScaledCANJaguar theJag) {

        boolean failed = false;
        int tries = 0;
        if (null != theJag) {
            if (!theJag.isInCommandedControlMode()) {
                System.out.println("*** Fixing Settings for " + theJag.getDescription());
                if (theJag.getCommandedControlMode() == CANJaguar.ControlMode.kPosition) {
                    setupJagForPositionControl(theJag);
                } else if (theJag.getCommandedControlMode() == CANJaguar.ControlMode.kSpeed) {
                    setupJagForSpeedControl(theJag);
                } else {
                    do {
                        try {
                            theJag.changeControlMode(theJag.getCommandedControlMode());
                        } catch (CANTimeoutException ex) {
                            failed = true;
                        }
                    } while (failed && (tries++ < RobotMap.m_kMaxCANRetries));
                }
            }
        }
    }

    public void tankDrive(double left, double right) {
        checkAndFixMotors();
//        System.out.println(left + " - " + right);
        byte group = 22;
        try {
            if (null != driveFL) {
                driveFL.setX(left, group);
            }
            if (null != driveFR) {
                driveFR.setX(right, group);
            }
            if (null != driveRL) {
                driveRL.setX(left, group);
            }
            if (null != driveRR) {
                driveRR.setX(right, group);
            }
            ScaledCANJaguar.updateSyncGroup(group);
        } catch (CANTimeoutException ex) {
//            System.out.println("tank Drive Timeout");
//            ex.printStackTrace();
        }

    }

    public void mecanumDrive_Cartesian(double x, double y, double rotation) {
        checkAndFixMotors();

//        if (!  (   (Math.abs(x) < 0.1)
//                && (Math.abs(y) < 0.1)
//                && (Math.abs(rotation) < 0.1))) 
        {
            //        if (mechanumDrive != null) {
//            mechanumDrive.mecanumDrive_Cartesian(x, y, rotation, 0);
//        }

            double scale = 100;
            double xGo = scale * x;
            double yGo = scale * y;
            double rotGo = scale * rotation;

//        System.out.println("xGo:" + xGo + "  yGo:" + yGo + "  rotGo:" + rotGo);
//        System.out.println("FL: " + ( -xGo + -rotGo +  yGo) + "      FR: " + ( -xGo + -rotGo + -yGo));
//        System.out.println("RL: " + (  xGo + -rotGo +  yGo) + "      RR: " + (  xGo + -rotGo + -yGo));
            byte group = 22;
            try {
                if (null != driveFL) {
                    driveFL.setX(-xGo + -rotGo + yGo, group);
                }
                if (null != driveFR) {
                    driveFR.setX(-xGo + -rotGo + -yGo, group);
                }
                if (null != driveRL) {
                    driveRL.setX(xGo + -rotGo + yGo, group);
                }
                if (null != driveRR) {
                    driveRR.setX(xGo + -rotGo + -yGo, group);
                }
                ScaledCANJaguar.updateSyncGroup(group);
            } catch (CANTimeoutException ex) {
//            System.out.println("oops");
            }
        }
    }

    public void resetGyro() {
        gyro.reset();
    }

    public double getAngle() {
        return gyro.getAngle();
    }
}
