// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package edu.wpi.first.wpilibj.templates.subsystems;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.templates.RobotMap;
import edu.wpi.first.wpilibj.templates.ScaledCANJaguar;
import edu.wpi.first.wpilibj.templates.commands.ManualDrive;

/**
 *
 */
public class Drive extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static ScaledCANJaguar driveFL;
    public static ScaledCANJaguar driveFR;
    public static ScaledCANJaguar driveRL;
    public static ScaledCANJaguar driveRR;
    public static RobotDrive mechanumDrive;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new ManualDrive());

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    public Drive()
    {
        init();
    }
    public final void init() {
        try {
            driveFL = new ScaledCANJaguar(RobotMap.FrontLeftMotorID);
            driveFL.setScalingFactor(RobotMap.SpeedScale);
        } catch (CANTimeoutException ex) {
            System.out.println("FAIL - Instantiating FL JAG " + RobotMap.FrontLeftMotorID);
            ex.printStackTrace();
        }

        try {
            driveFR = new ScaledCANJaguar(RobotMap.FrontRightMotorID);
            driveFR.setScalingFactor(RobotMap.SpeedScale);
        } catch (CANTimeoutException ex) {
            System.out.println("FAIL - Instantiating FR JAG " + RobotMap.FrontRightMotorID);
            ex.printStackTrace();
        }

        try {
            driveRL = new ScaledCANJaguar(RobotMap.RearLeftMotorID);
            driveRL.setScalingFactor(RobotMap.SpeedScale);
        } catch (CANTimeoutException ex) {
            System.out.println("FAIL - Instantiating RL JAG " + RobotMap.RearLeftMotorID);
            ex.printStackTrace();
        }

        try {
            driveRR = new ScaledCANJaguar(RobotMap.RearRightMotorID);
            driveRR.setScalingFactor(RobotMap.SpeedScale);
        } catch (CANTimeoutException ex) {
            System.out.println("FAIL - Instantiating RR JAG " + RobotMap.RearRightMotorID);
            ex.printStackTrace();
        }

        setupJagForSpeedControl(driveFL);
        setupJagForSpeedControl(driveRL);
        setupJagForSpeedControl(driveFR);
        setupJagForSpeedControl(driveRR);

        try {
            mechanumDrive = new RobotDrive(driveFL, driveRL, driveFR, driveRR);
        } catch (Exception ex) {
            System.out.println("Can't get mech drive going...  FAIL");
            ex.printStackTrace();
        }

        if (mechanumDrive == null) {
            System.out.println("MD = NULL");
        } else {
            try {
                mechanumDrive.setSafetyEnabled(false);
                mechanumDrive.setExpiration(4.0);
                mechanumDrive.setSensitivity(0.5);
                mechanumDrive.setMaxOutput(1.0);
                mechanumDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, RobotMap.FrontLeftMotorInverted);
                mechanumDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, RobotMap.RearLeftMotorInverted);
                mechanumDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, RobotMap.FrontRightMotorInverted);
                mechanumDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, RobotMap.FrontRightMotorInverted);
            } catch (Exception ex) {
                System.out.println("Can't configure mech drive ...  FAIL");
                ex.printStackTrace();
            }
        }
    }

    private static void setupJagForSpeedControl(CANJaguar jag) {
        if (jag != null) {
            try {
                jag.changeControlMode(CANJaguar.ControlMode.kSpeed);
                jag.setSpeedReference(CANJaguar.SpeedReference.kQuadEncoder);
                jag.configEncoderCodesPerRev(360 * 3);
                jag.setPID(.75, 0.05, 0);
                jag.enableControl();
            } catch (CANTimeoutException ex) {
                System.out.println("Exception while configuring speed");
            }
        }
    }

    private static void setupJagForPositionControl(CANJaguar jag) {
        if (jag != null) {
            try {
                jag.changeControlMode(CANJaguar.ControlMode.kPosition);
                jag.setPositionReference(CANJaguar.PositionReference.kQuadEncoder);
                jag.configEncoderCodesPerRev(360);
                jag.setPID(15, 0.08, 25);
//                encJagRRMotorDrive.configNeutralMode(CANJaguar.NeutralMode.kBrake);
                jag.enableControl();
            } catch (CANTimeoutException ex) {
                System.out.println("Exception while configuring position");
            }
        }
    }

    private static void setupJagCoastMode(CANJaguar jag, boolean coast) {
        if (jag != null) {
            try {
                if (!coast) {
                    jag.configNeutralMode(CANJaguar.NeutralMode.kBrake);
                } else {
                    jag.configNeutralMode(CANJaguar.NeutralMode.kCoast);
                }
                jag.enableControl();
            } catch (CANTimeoutException ex) {
                System.out.println("Exception while coast mode");
            }
        }
    }

    public void setCoastMode(boolean coast) {
        setupJagCoastMode(driveFL, coast);
        setupJagCoastMode(driveRL, coast);
        setupJagCoastMode(driveFR, coast);
        setupJagCoastMode(driveRR, coast);
    }

    public void mecanumDrive_Cartesian(double x, double y, double rotation) {
        if (mechanumDrive != null) {
            mechanumDrive.mecanumDrive_Cartesian(x, y, rotation, 0);
        }
    }
}
