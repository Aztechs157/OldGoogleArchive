/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.wpi.first.wpilibj.templates.subsystems;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.templates.MotorControlAssembly;
import edu.wpi.first.wpilibj.templates.RobotMap;
import edu.wpi.first.wpilibj.templates.commands.LiftCommand;

/**
 *
 * @author aztechs
 */
public class LiftSubsystem extends Subsystem {
    
    private static Victor liftMotorL;
    private static Victor liftMotorR;
    
    private static DigitalInput liftLimitHighL;
    private static DigitalInput liftLimitHighR;
    
    public MotorControlAssembly liftAssemblyL;
    public MotorControlAssembly liftAssemblyR;
    
    public double LIFT_EXTEND_SPEED_L = 0.2;
    public double LIFT_RETRACT_SPEED_L = 0.1;
    public boolean LIFT_INVERTED_L = false;
    
    public double LIFT_EXTEND_SPEED_R = 0.2;
    public double LIFT_RETRACT_SPEED_R = 0.1;
    public boolean LIFT_INVERTED_R = false;
    
    public LiftSubsystem()
    {
        liftMotorL = new Victor(RobotMap.LiftLPwmID);
        liftMotorR = new Victor(RobotMap.LiftRPwmID);
        liftLimitHighL = new DigitalInput(RobotMap.LiftLimitHighLGPIOPort);
        liftLimitHighR = new DigitalInput(RobotMap.LiftLimitHighRGPIOPort);
        liftAssemblyL = new MotorControlAssembly(liftMotorL, null, null, liftLimitHighL);
        liftAssemblyR = new MotorControlAssembly(liftMotorR, null, null, liftLimitHighR);
        liftAssemblyL.setInvertedMotor(LIFT_INVERTED_L);
        liftAssemblyR.setInvertedMotor(LIFT_INVERTED_R);
    }
    
        // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new LiftCommand());

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void extend() {
        System.out.println("Extending... limitL="+liftAssemblyL.getLimit(LIFT_EXTEND_SPEED_L)+", limitR="+liftAssemblyR.getLimit(LIFT_EXTEND_SPEED_R));
        liftAssemblyL.runFromInput(LIFT_EXTEND_SPEED_L);
        liftAssemblyR.runFromInput(LIFT_EXTEND_SPEED_R);
    }
    
    public void retract() {
        System.out.println("Retracting... limitL="+liftAssemblyL.getLimit(-LIFT_RETRACT_SPEED_L)+", limitR="+liftAssemblyR.getLimit(-LIFT_RETRACT_SPEED_R));
        liftAssemblyL.runFromInput(-LIFT_RETRACT_SPEED_L);
        liftAssemblyR.runFromInput(-LIFT_RETRACT_SPEED_R);
    }
}

